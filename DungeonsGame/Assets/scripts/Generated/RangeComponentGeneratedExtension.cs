//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public RangeComponent range { get { return (RangeComponent)GetComponent(BoardComponentIds.Range); } }
        public bool hasRange { get { return HasComponent(BoardComponentIds.Range); } }

        public Entity AddRange(int newWidth, int newHeight) {
            var component = CreateComponent<RangeComponent>(BoardComponentIds.Range);
            component.width = newWidth;
            component.height = newHeight;
            return AddComponent(BoardComponentIds.Range, component);
        }

        public Entity ReplaceRange(int newWidth, int newHeight) {
            var component = CreateComponent<RangeComponent>(BoardComponentIds.Range);
            component.width = newWidth;
            component.height = newHeight;
            ReplaceComponent(BoardComponentIds.Range, component);
            return this;
        }

        public Entity RemoveRange() {
            return RemoveComponent(BoardComponentIds.Range);
        }
    }
}

    public partial class BoardMatcher {

        static IMatcher _matcherRange;

        public static IMatcher Range {
            get {
                if(_matcherRange == null) {
                    var matcher = (Matcher)Matcher.AllOf(BoardComponentIds.Range);
                    matcher.componentNames = BoardComponentIds.componentNames;
                    _matcherRange = matcher;
                }

                return _matcherRange;
            }
        }
    }

    public partial class CoreMatcher {

        static IMatcher _matcherRange;

        public static IMatcher Range {
            get {
                if(_matcherRange == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Range);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherRange = matcher;
                }

                return _matcherRange;
            }
        }
    }
