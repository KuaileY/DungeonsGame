//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public HolderComponent holder { get { return (HolderComponent)GetComponent(BoardComponentIds.Holder); } }
        public bool hasHolder { get { return HasComponent(BoardComponentIds.Holder); } }

        public Entity AddHolder(System.Collections.Generic.Dictionary<Res.InPools, UnityEngine.Transform> newPoolDic) {
            var component = CreateComponent<HolderComponent>(BoardComponentIds.Holder);
            component.poolDic = newPoolDic;
            return AddComponent(BoardComponentIds.Holder, component);
        }

        public Entity ReplaceHolder(System.Collections.Generic.Dictionary<Res.InPools, UnityEngine.Transform> newPoolDic) {
            var component = CreateComponent<HolderComponent>(BoardComponentIds.Holder);
            component.poolDic = newPoolDic;
            ReplaceComponent(BoardComponentIds.Holder, component);
            return this;
        }

        public Entity RemoveHolder() {
            return RemoveComponent(BoardComponentIds.Holder);
        }
    }

    public partial class Pool {

        public Entity holderEntity { get { return GetGroup(BoardMatcher.Holder).GetSingleEntity(); } }
        public HolderComponent holder { get { return holderEntity.holder; } }
        public bool hasHolder { get { return holderEntity != null; } }

        public Entity SetHolder(System.Collections.Generic.Dictionary<Res.InPools, UnityEngine.Transform> newPoolDic) {
            if(hasHolder) {
                throw new EntitasException("Could not set holder!\n" + this + " already has an entity with HolderComponent!",
                    "You should check if the pool already has a holderEntity before setting it or use pool.ReplaceHolder().");
            }
            var entity = CreateEntity();
            entity.AddHolder(newPoolDic);
            return entity;
        }

        public Entity ReplaceHolder(System.Collections.Generic.Dictionary<Res.InPools, UnityEngine.Transform> newPoolDic) {
            var entity = holderEntity;
            if(entity == null) {
                entity = SetHolder(newPoolDic);
            } else {
                entity.ReplaceHolder(newPoolDic);
            }

            return entity;
        }

        public void RemoveHolder() {
            DestroyEntity(holderEntity);
        }
    }
}

    public partial class BoardMatcher {

        static IMatcher _matcherHolder;

        public static IMatcher Holder {
            get {
                if(_matcherHolder == null) {
                    var matcher = (Matcher)Matcher.AllOf(BoardComponentIds.Holder);
                    matcher.componentNames = BoardComponentIds.componentNames;
                    _matcherHolder = matcher;
                }

                return _matcherHolder;
            }
        }
    }

    public partial class CoreMatcher {

        static IMatcher _matcherHolder;

        public static IMatcher Holder {
            get {
                if(_matcherHolder == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Holder);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherHolder = matcher;
                }

                return _matcherHolder;
            }
        }
    }

    public partial class InputMatcher {

        static IMatcher _matcherHolder;

        public static IMatcher Holder {
            get {
                if(_matcherHolder == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.Holder);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherHolder = matcher;
                }

                return _matcherHolder;
            }
        }
    }
