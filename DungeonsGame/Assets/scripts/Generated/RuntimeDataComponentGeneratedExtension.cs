//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public RuntimeDataComponent runtimeData { get { return (RuntimeDataComponent)GetComponent(InputComponentIds.RuntimeData); } }
        public bool hasRuntimeData { get { return HasComponent(InputComponentIds.RuntimeData); } }

        public Entity AddRuntimeData(SQLite4Unity3d.SQLiteConnection newDb) {
            var component = CreateComponent<RuntimeDataComponent>(InputComponentIds.RuntimeData);
            component.db = newDb;
            return AddComponent(InputComponentIds.RuntimeData, component);
        }

        public Entity ReplaceRuntimeData(SQLite4Unity3d.SQLiteConnection newDb) {
            var component = CreateComponent<RuntimeDataComponent>(InputComponentIds.RuntimeData);
            component.db = newDb;
            ReplaceComponent(InputComponentIds.RuntimeData, component);
            return this;
        }

        public Entity RemoveRuntimeData() {
            return RemoveComponent(InputComponentIds.RuntimeData);
        }
    }

    public partial class Pool {

        public Entity runtimeDataEntity { get { return GetGroup(InputMatcher.RuntimeData).GetSingleEntity(); } }
        public RuntimeDataComponent runtimeData { get { return runtimeDataEntity.runtimeData; } }
        public bool hasRuntimeData { get { return runtimeDataEntity != null; } }

        public Entity SetRuntimeData(SQLite4Unity3d.SQLiteConnection newDb) {
            if(hasRuntimeData) {
                throw new EntitasException("Could not set runtimeData!\n" + this + " already has an entity with RuntimeDataComponent!",
                    "You should check if the pool already has a runtimeDataEntity before setting it or use pool.ReplaceRuntimeData().");
            }
            var entity = CreateEntity();
            entity.AddRuntimeData(newDb);
            return entity;
        }

        public Entity ReplaceRuntimeData(SQLite4Unity3d.SQLiteConnection newDb) {
            var entity = runtimeDataEntity;
            if(entity == null) {
                entity = SetRuntimeData(newDb);
            } else {
                entity.ReplaceRuntimeData(newDb);
            }

            return entity;
        }

        public void RemoveRuntimeData() {
            DestroyEntity(runtimeDataEntity);
        }
    }
}

    public partial class InputMatcher {

        static IMatcher _matcherRuntimeData;

        public static IMatcher RuntimeData {
            get {
                if(_matcherRuntimeData == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.RuntimeData);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherRuntimeData = matcher;
                }

                return _matcherRuntimeData;
            }
        }
    }
