//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        static readonly TestComponent testComponent = new TestComponent();

        public bool isTest {
            get { return HasComponent(BoardComponentIds.Test); }
            set {
                if(value != isTest) {
                    if(value) {
                        AddComponent(BoardComponentIds.Test, testComponent);
                    } else {
                        RemoveComponent(BoardComponentIds.Test);
                    }
                }
            }
        }

        public Entity IsTest(bool value) {
            isTest = value;
            return this;
        }
    }
}

    public partial class BoardMatcher {

        static IMatcher _matcherTest;

        public static IMatcher Test {
            get {
                if(_matcherTest == null) {
                    var matcher = (Matcher)Matcher.AllOf(BoardComponentIds.Test);
                    matcher.componentNames = BoardComponentIds.componentNames;
                    _matcherTest = matcher;
                }

                return _matcherTest;
            }
        }
    }

    public partial class CoreMatcher {

        static IMatcher _matcherTest;

        public static IMatcher Test {
            get {
                if(_matcherTest == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Test);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherTest = matcher;
                }

                return _matcherTest;
            }
        }
    }

    public partial class InputMatcher {

        static IMatcher _matcherTest;

        public static IMatcher Test {
            get {
                if(_matcherTest == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.Test);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherTest = matcher;
                }

                return _matcherTest;
            }
        }
    }
