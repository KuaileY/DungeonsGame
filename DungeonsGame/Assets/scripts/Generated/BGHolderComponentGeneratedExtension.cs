//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public BGHolderComponent bGHolder { get { return (BGHolderComponent)GetComponent(InputComponentIds.BGHolder); } }
        public bool hasBGHolder { get { return HasComponent(InputComponentIds.BGHolder); } }

        public Entity AddBGHolder(UnityEngine.GameObject[,] newGoArray) {
            var component = CreateComponent<BGHolderComponent>(InputComponentIds.BGHolder);
            component.goArray = newGoArray;
            return AddComponent(InputComponentIds.BGHolder, component);
        }

        public Entity ReplaceBGHolder(UnityEngine.GameObject[,] newGoArray) {
            var component = CreateComponent<BGHolderComponent>(InputComponentIds.BGHolder);
            component.goArray = newGoArray;
            ReplaceComponent(InputComponentIds.BGHolder, component);
            return this;
        }

        public Entity RemoveBGHolder() {
            return RemoveComponent(InputComponentIds.BGHolder);
        }
    }

    public partial class Pool {

        public Entity bGHolderEntity { get { return GetGroup(InputMatcher.BGHolder).GetSingleEntity(); } }
        public BGHolderComponent bGHolder { get { return bGHolderEntity.bGHolder; } }
        public bool hasBGHolder { get { return bGHolderEntity != null; } }

        public Entity SetBGHolder(UnityEngine.GameObject[,] newGoArray) {
            if(hasBGHolder) {
                throw new EntitasException("Could not set bGHolder!\n" + this + " already has an entity with BGHolderComponent!",
                    "You should check if the pool already has a bGHolderEntity before setting it or use pool.ReplaceBGHolder().");
            }
            var entity = CreateEntity();
            entity.AddBGHolder(newGoArray);
            return entity;
        }

        public Entity ReplaceBGHolder(UnityEngine.GameObject[,] newGoArray) {
            var entity = bGHolderEntity;
            if(entity == null) {
                entity = SetBGHolder(newGoArray);
            } else {
                entity.ReplaceBGHolder(newGoArray);
            }

            return entity;
        }

        public void RemoveBGHolder() {
            DestroyEntity(bGHolderEntity);
        }
    }
}

    public partial class InputMatcher {

        static IMatcher _matcherBGHolder;

        public static IMatcher BGHolder {
            get {
                if(_matcherBGHolder == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.BGHolder);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherBGHolder = matcher;
                }

                return _matcherBGHolder;
            }
        }
    }
