//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public LoadBoardComponent loadBoard { get { return (LoadBoardComponent)GetComponent(BoardComponentIds.LoadBoard); } }
        public bool hasLoadBoard { get { return HasComponent(BoardComponentIds.LoadBoard); } }

        public Entity AddLoadBoard(int newFloor) {
            var component = CreateComponent<LoadBoardComponent>(BoardComponentIds.LoadBoard);
            component.floor = newFloor;
            return AddComponent(BoardComponentIds.LoadBoard, component);
        }

        public Entity ReplaceLoadBoard(int newFloor) {
            var component = CreateComponent<LoadBoardComponent>(BoardComponentIds.LoadBoard);
            component.floor = newFloor;
            ReplaceComponent(BoardComponentIds.LoadBoard, component);
            return this;
        }

        public Entity RemoveLoadBoard() {
            return RemoveComponent(BoardComponentIds.LoadBoard);
        }
    }

    public partial class Pool {

        public Entity loadBoardEntity { get { return GetGroup(BoardMatcher.LoadBoard).GetSingleEntity(); } }
        public LoadBoardComponent loadBoard { get { return loadBoardEntity.loadBoard; } }
        public bool hasLoadBoard { get { return loadBoardEntity != null; } }

        public Entity SetLoadBoard(int newFloor) {
            if(hasLoadBoard) {
                throw new EntitasException("Could not set loadBoard!\n" + this + " already has an entity with LoadBoardComponent!",
                    "You should check if the pool already has a loadBoardEntity before setting it or use pool.ReplaceLoadBoard().");
            }
            var entity = CreateEntity();
            entity.AddLoadBoard(newFloor);
            return entity;
        }

        public Entity ReplaceLoadBoard(int newFloor) {
            var entity = loadBoardEntity;
            if(entity == null) {
                entity = SetLoadBoard(newFloor);
            } else {
                entity.ReplaceLoadBoard(newFloor);
            }

            return entity;
        }

        public void RemoveLoadBoard() {
            DestroyEntity(loadBoardEntity);
        }
    }
}

    public partial class BoardMatcher {

        static IMatcher _matcherLoadBoard;

        public static IMatcher LoadBoard {
            get {
                if(_matcherLoadBoard == null) {
                    var matcher = (Matcher)Matcher.AllOf(BoardComponentIds.LoadBoard);
                    matcher.componentNames = BoardComponentIds.componentNames;
                    _matcherLoadBoard = matcher;
                }

                return _matcherLoadBoard;
            }
        }
    }
