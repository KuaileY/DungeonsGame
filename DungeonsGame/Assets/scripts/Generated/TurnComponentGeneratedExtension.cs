//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public TurnComponent turn { get { return (TurnComponent)GetComponent(InputComponentIds.Turn); } }
        public bool hasTurn { get { return HasComponent(InputComponentIds.Turn); } }

        public Entity AddTurn(string newType, UnityEngine.Vector2 newDir) {
            var component = CreateComponent<TurnComponent>(InputComponentIds.Turn);
            component.type = newType;
            component.dir = newDir;
            return AddComponent(InputComponentIds.Turn, component);
        }

        public Entity ReplaceTurn(string newType, UnityEngine.Vector2 newDir) {
            var component = CreateComponent<TurnComponent>(InputComponentIds.Turn);
            component.type = newType;
            component.dir = newDir;
            ReplaceComponent(InputComponentIds.Turn, component);
            return this;
        }

        public Entity RemoveTurn() {
            return RemoveComponent(InputComponentIds.Turn);
        }
    }

    public partial class Pool {

        public Entity turnEntity { get { return GetGroup(InputMatcher.Turn).GetSingleEntity(); } }
        public TurnComponent turn { get { return turnEntity.turn; } }
        public bool hasTurn { get { return turnEntity != null; } }

        public Entity SetTurn(string newType, UnityEngine.Vector2 newDir) {
            if(hasTurn) {
                throw new EntitasException("Could not set turn!\n" + this + " already has an entity with TurnComponent!",
                    "You should check if the pool already has a turnEntity before setting it or use pool.ReplaceTurn().");
            }
            var entity = CreateEntity();
            entity.AddTurn(newType, newDir);
            return entity;
        }

        public Entity ReplaceTurn(string newType, UnityEngine.Vector2 newDir) {
            var entity = turnEntity;
            if(entity == null) {
                entity = SetTurn(newType, newDir);
            } else {
                entity.ReplaceTurn(newType, newDir);
            }

            return entity;
        }

        public void RemoveTurn() {
            DestroyEntity(turnEntity);
        }
    }
}

    public partial class InputMatcher {

        static IMatcher _matcherTurn;

        public static IMatcher Turn {
            get {
                if(_matcherTurn == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.Turn);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherTurn = matcher;
                }

                return _matcherTurn;
            }
        }
    }
