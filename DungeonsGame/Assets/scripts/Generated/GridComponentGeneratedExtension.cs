//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public GridComponent grid { get { return (GridComponent)GetComponent(BoardComponentIds.Grid); } }
        public bool hasGrid { get { return HasComponent(BoardComponentIds.Grid); } }

        public Entity AddGrid(System.Collections.Generic.List<SingleRoom> newRooms, GridComponent.Tile[,] newGrids, string newName, int newWidth, int newHeight) {
            var component = CreateComponent<GridComponent>(BoardComponentIds.Grid);
            component.rooms = newRooms;
            component.grids = newGrids;
            component.name = newName;
            component.width = newWidth;
            component.height = newHeight;
            return AddComponent(BoardComponentIds.Grid, component);
        }

        public Entity ReplaceGrid(System.Collections.Generic.List<SingleRoom> newRooms, GridComponent.Tile[,] newGrids, string newName, int newWidth, int newHeight) {
            var component = CreateComponent<GridComponent>(BoardComponentIds.Grid);
            component.rooms = newRooms;
            component.grids = newGrids;
            component.name = newName;
            component.width = newWidth;
            component.height = newHeight;
            ReplaceComponent(BoardComponentIds.Grid, component);
            return this;
        }

        public Entity RemoveGrid() {
            return RemoveComponent(BoardComponentIds.Grid);
        }
    }

    public partial class Pool {

        public Entity gridEntity { get { return GetGroup(BoardMatcher.Grid).GetSingleEntity(); } }
        public GridComponent grid { get { return gridEntity.grid; } }
        public bool hasGrid { get { return gridEntity != null; } }

        public Entity SetGrid(System.Collections.Generic.List<SingleRoom> newRooms, GridComponent.Tile[,] newGrids, string newName, int newWidth, int newHeight) {
            if(hasGrid) {
                throw new EntitasException("Could not set grid!\n" + this + " already has an entity with GridComponent!",
                    "You should check if the pool already has a gridEntity before setting it or use pool.ReplaceGrid().");
            }
            var entity = CreateEntity();
            entity.AddGrid(newRooms, newGrids, newName, newWidth, newHeight);
            return entity;
        }

        public Entity ReplaceGrid(System.Collections.Generic.List<SingleRoom> newRooms, GridComponent.Tile[,] newGrids, string newName, int newWidth, int newHeight) {
            var entity = gridEntity;
            if(entity == null) {
                entity = SetGrid(newRooms, newGrids, newName, newWidth, newHeight);
            } else {
                entity.ReplaceGrid(newRooms, newGrids, newName, newWidth, newHeight);
            }

            return entity;
        }

        public void RemoveGrid() {
            DestroyEntity(gridEntity);
        }
    }
}

    public partial class BoardMatcher {

        static IMatcher _matcherGrid;

        public static IMatcher Grid {
            get {
                if(_matcherGrid == null) {
                    var matcher = (Matcher)Matcher.AllOf(BoardComponentIds.Grid);
                    matcher.componentNames = BoardComponentIds.componentNames;
                    _matcherGrid = matcher;
                }

                return _matcherGrid;
            }
        }
    }
