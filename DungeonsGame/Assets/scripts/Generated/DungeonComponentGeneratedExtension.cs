//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public DungeonComponent dungeon { get { return (DungeonComponent)GetComponent(CoreComponentIds.Dungeon); } }
        public bool hasDungeon { get { return HasComponent(CoreComponentIds.Dungeon); } }

        public Entity AddDungeon(int newValue) {
            var component = CreateComponent<DungeonComponent>(CoreComponentIds.Dungeon);
            component.value = newValue;
            return AddComponent(CoreComponentIds.Dungeon, component);
        }

        public Entity ReplaceDungeon(int newValue) {
            var component = CreateComponent<DungeonComponent>(CoreComponentIds.Dungeon);
            component.value = newValue;
            ReplaceComponent(CoreComponentIds.Dungeon, component);
            return this;
        }

        public Entity RemoveDungeon() {
            return RemoveComponent(CoreComponentIds.Dungeon);
        }
    }

    public partial class Pool {

        public Entity dungeonEntity { get { return GetGroup(CoreMatcher.Dungeon).GetSingleEntity(); } }
        public DungeonComponent dungeon { get { return dungeonEntity.dungeon; } }
        public bool hasDungeon { get { return dungeonEntity != null; } }

        public Entity SetDungeon(int newValue) {
            if(hasDungeon) {
                throw new EntitasException("Could not set dungeon!\n" + this + " already has an entity with DungeonComponent!",
                    "You should check if the pool already has a dungeonEntity before setting it or use pool.ReplaceDungeon().");
            }
            var entity = CreateEntity();
            entity.AddDungeon(newValue);
            return entity;
        }

        public Entity ReplaceDungeon(int newValue) {
            var entity = dungeonEntity;
            if(entity == null) {
                entity = SetDungeon(newValue);
            } else {
                entity.ReplaceDungeon(newValue);
            }

            return entity;
        }

        public void RemoveDungeon() {
            DestroyEntity(dungeonEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherDungeon;

        public static IMatcher Dungeon {
            get {
                if(_matcherDungeon == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Dungeon);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherDungeon = matcher;
                }

                return _matcherDungeon;
            }
        }
    }
