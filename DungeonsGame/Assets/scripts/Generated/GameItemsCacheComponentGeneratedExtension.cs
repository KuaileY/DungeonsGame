//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public GameItemsCacheComponent gameItemsCache { get { return (GameItemsCacheComponent)GetComponent(CoreComponentIds.GameItemsCache); } }
        public bool hasGameItemsCache { get { return HasComponent(CoreComponentIds.GameItemsCache); } }

        public Entity AddGameItemsCache(System.Collections.Generic.List<Entitas.Entity[,]> newRoomList) {
            var component = CreateComponent<GameItemsCacheComponent>(CoreComponentIds.GameItemsCache);
            component.roomList = newRoomList;
            return AddComponent(CoreComponentIds.GameItemsCache, component);
        }

        public Entity ReplaceGameItemsCache(System.Collections.Generic.List<Entitas.Entity[,]> newRoomList) {
            var component = CreateComponent<GameItemsCacheComponent>(CoreComponentIds.GameItemsCache);
            component.roomList = newRoomList;
            ReplaceComponent(CoreComponentIds.GameItemsCache, component);
            return this;
        }

        public Entity RemoveGameItemsCache() {
            return RemoveComponent(CoreComponentIds.GameItemsCache);
        }
    }

    public partial class Pool {

        public Entity gameItemsCacheEntity { get { return GetGroup(CoreMatcher.GameItemsCache).GetSingleEntity(); } }
        public GameItemsCacheComponent gameItemsCache { get { return gameItemsCacheEntity.gameItemsCache; } }
        public bool hasGameItemsCache { get { return gameItemsCacheEntity != null; } }

        public Entity SetGameItemsCache(System.Collections.Generic.List<Entitas.Entity[,]> newRoomList) {
            if(hasGameItemsCache) {
                throw new EntitasException("Could not set gameItemsCache!\n" + this + " already has an entity with GameItemsCacheComponent!",
                    "You should check if the pool already has a gameItemsCacheEntity before setting it or use pool.ReplaceGameItemsCache().");
            }
            var entity = CreateEntity();
            entity.AddGameItemsCache(newRoomList);
            return entity;
        }

        public Entity ReplaceGameItemsCache(System.Collections.Generic.List<Entitas.Entity[,]> newRoomList) {
            var entity = gameItemsCacheEntity;
            if(entity == null) {
                entity = SetGameItemsCache(newRoomList);
            } else {
                entity.ReplaceGameItemsCache(newRoomList);
            }

            return entity;
        }

        public void RemoveGameItemsCache() {
            DestroyEntity(gameItemsCacheEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherGameItemsCache;

        public static IMatcher GameItemsCache {
            get {
                if(_matcherGameItemsCache == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.GameItemsCache);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherGameItemsCache = matcher;
                }

                return _matcherGameItemsCache;
            }
        }
    }
